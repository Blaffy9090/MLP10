@page "/gosts/edit"
@using Microsoft.EntityFrameworkCore
@using MLP10.Data
@inject IDbContextFactory<MLP10.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Gost</h2>
<hr />
@if (Gost is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Gost" OnValidSubmit="UpdateGost" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Gost.GostId" value="@Gost.GostId" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Gost.FirstName" class="form-control" />
                    <ValidationMessage For="() => Gost.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Gost.LastName" class="form-control" />
                    <ValidationMessage For="() => Gost.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birht" class="form-label">Birht:</label>
                    <InputDate id="birht" @bind-Value="Gost.Birht" class="form-control" />
                    <ValidationMessage For="() => Gost.Birht" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="pasport" class="form-label">Pasport:</label>
                    <InputText id="pasport" @bind-Value="Gost.Pasport" class="form-control" />
                    <ValidationMessage For="() => Gost.Pasport" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone:</label>
                    <InputText id="phone" @bind-Value="Gost.Phone" class="form-control" />
                    <ValidationMessage For="() => Gost.Phone" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/gosts">Вернуться к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int GostId { get; set; }

    [SupplyParameterFromForm]
    private Gost? Gost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Gost ??= await context.Gosts.FirstOrDefaultAsync(m => m.GostId == GostId);

        if (Gost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateGost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Gost!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GostExists(Gost!.GostId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/gosts");
    }

    private bool GostExists(int gostid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Gosts.Any(e => e.GostId == gostid);
    }
}
