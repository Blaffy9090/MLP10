@page "/brons/details"
@using Microsoft.EntityFrameworkCore
@using MLP10.Data
@inject IDbContextFactory<MLP10.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Просмотр</PageTitle>

<h1>Удалить</h1>

<div>
    <hr />
    @if (Arenda is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ApartamentId</dt>
            <dd class="col-sm-10">@Arenda.ApartamentId</dd>
            <dt class="col-sm-2">GostId</dt>
            <dd class="col-sm-10">@Arenda.GostId</dd>
            <dt class="col-sm-2">DateIn</dt>
            <dd class="col-sm-10">@Arenda.DateIn</dd>
            <dt class="col-sm-2">DateOut</dt>
            <dd class="col-sm-10">@Arenda.DateOut</dd>
            <dt class="col-sm-2">Cost</dt>
            <dd class="col-sm-10">@Arenda.Cost</dd>
        </dl>
        <div>
            <a href="@($"/brons/edit?arendaid={ArendaId}&op={op}")">Редактировать</a> |
            <a href="@($"/brons?id={id}&op={op}")">Вернуться</a>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int? op { get; set; }

    [SupplyParameterFromQuery]
    private int ArendaId { get; set; }

    [SupplyParameterFromForm]
    private Arenda? Arenda { get; set; }

    private int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Arenda = await context.Arendas.FirstOrDefaultAsync(m => m.ArendaId == ArendaId);

        if (Arenda is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (op == 1)
        {
            id = Arenda!.ApartamentId;
        }
        else
        {
            id = Arenda!.GostId;
        }
    }
}
