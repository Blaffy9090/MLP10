@page "/apartaments/details"
@using Microsoft.EntityFrameworkCore
@using MLP10.Data
@inject IDbContextFactory<MLP10.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Просмотр</PageTitle>

<h1>Просмотр</h1>

<div>
    <hr />
    @if (apartament is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Номер комнаты</dt>
            <dd class="col-sm-10">@apartament.ApartamentNumber</dd>
            <dt class="col-sm-2">Тип номера</dt>
            <dd class="col-sm-10">@apartament.ApartamentType</dd>
            <dt class="col-sm-2">Стоимость</dt>
            <dd class="col-sm-10">@apartament.Cost</dd>
        </dl>
        <div>
            <a href="@($"/apartaments/edit?apartamentid={apartament.ApartamentId}")">Редактировать</a> |
            <a href="@($"/apartaments")">Вернуться к списку номеров</a>
        </div>
    }
</div>

@code {
    private Apartament? apartament;

    [SupplyParameterFromQuery]
    private int ApartamentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        apartament = await context.Apartaments.FirstOrDefaultAsync(m => m.ApartamentId == ApartamentId);

        if (apartament is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
